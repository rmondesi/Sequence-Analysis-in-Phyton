{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2b4b0c21",
   "metadata": {},
   "source": [
    "Home-made Algorithm "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b74eb550",
   "metadata": {},
   "source": [
    "# Single Sequence Alligment \n",
    "obtained code within function match_index here: https://www.biostars.org/p/318684/\n",
    "Determined how to approach the multiple alignment problem by doing this mini version for single sequence alignment\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a8421334",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC', 'ATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG', 'ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC']\n",
      "this is t_1: ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "this is t_2: ATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "with length: 280and length280\n",
      "this is the allignment: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n",
      "ATGGGTTC-AA----CAA--GCGA---G-AGCCAGAGTAACAGTCTCACTCAC-ACAGA-AGACGAA-GCTT---TCTT-ATTT-GC-CAT-GCAATTG-TG-TAGTGCTTCTGTACT--T-C-CTAT--GGT--C-CTA-AAATCAG-C--C-GTAGAAC-T-TGACCTTC-TTGAGCTAATGGCT-AAGGCTGGTCCAGGTGCAGCT-ATTTCTCCTTCT-GAATTAGCTGCTCAGCTC-TCAACTCAGAACCCAGAAG-CACCTGT---T-A--TG-C-T-TG-ATC--GGA-TGCTTAGGCTA-CTTGCT--T---CT-TAC----TC-TG---TTCTCA--ATT----G-----TA--C---------TC-----\n",
      "|||||  . ||    |||  | ||   | || || ||  | | || || |    | ||  |||| || || |   || | |    || ||  | ||  | |  || ||     | |    | | | ||  |||  | ||  ||||  | |  | ||| ||  | ||  | |  ||||| |  |||   ||      |  |    |  || | || | | | | |||  |       | | | ||||   | |||||   |  ||||| |   | |  || | | || | |  ||  ||| |   ||  ||| ||  |   || |||    || ||   ||||    |||    |     ||  |         ||     \n",
      "ATGGG--GGAAGAAACAAATG-GATCAGTAG-CA-AG--A-A-TC-CA-T---GA-AG-GAGAC-AAAGC-TGAGTC-TCA---AGCTCA-AG-AA--GAT-ATA-TG-----G-A--AGTACAC-ATTTGGTTTCACT-GAAAT--GGCTGCAGTA-AA-ATGTG--C-T-ATTGAG-T--TGG--GAA------T--A----C--CTGA-TT-T-C-T-TAGAA--A-------A-C-CATCAA---A-AACCC---A-TCACCT-TAAATCAACTGTCGTCTGCA-CTTGG-CTGC-T---CT-TCTT-CTAATTTTCTCTACCGCATCCTGAGGTTCT--TGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "  Score=179\n",
      "\n",
      "[0, 1, 2, 3, 4, 10, 11, 16, 17, 18, 21, 23, 24, 28, 30, 31, 33, 34, 36, 37, 40, 42, 44, 45, 47, 48, 50, 55, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 72, 76, 77, 79, 81, 86, 87, 89, 90, 93, 95, 96, 99, 101, 104, 105, 107, 108, 114, 116, 121, 123, 125, 127, 128, 131, 132, 133, 136, 138, 139, 142, 143, 144, 145, 148, 150, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 174, 175, 176, 177, 178, 180, 183, 184, 185, 189, 190, 197, 200, 205, 208, 209, 211, 213, 214, 216, 218, 220, 222, 224, 225, 226, 229, 237, 239, 241, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 260, 263, 264, 265, 266, 267, 269, 273, 275, 278, 279, 281, 283, 285, 286, 288, 290, 293, 294, 297, 298, 299, 301, 305, 306, 309, 310, 311, 313, 314, 317, 321, 322, 324, 325, 326, 331, 332, 334, 335, 339, 340, 341, 342, 347, 348, 349, 354, 360, 361, 364, 374, 375]\n"
     ]
    }
   ],
   "source": [
    "## This is a modification of the format_alignment method \n",
    "from Bio import pairwise2\n",
    "from Bio.pairwise2 import format_alignment\n",
    "from Bio.Align.Applications import ClustalwCommandline\n",
    "\n",
    "def match_index(align1, align2, score, begin, end):\n",
    "    \"\"\"Format the alignment prettily into a string. \n",
    "\n",
    "      Since Biopython 1.71 identical matches are shown with a pipe \n",
    "      character, mismatches as a dot, and gaps as a space. \n",
    "\n",
    "     spaces are also used at the start/end of a local \n",
    "      alignment. \n",
    "\n",
    "      Prior releases just used the pipe character to indicate  \n",
    "      aligned region (matches, mismatches and gaps). \n",
    "      \"\"\" \n",
    "    s = [] \n",
    "    s.append(\"%s\\n\" % align1) \n",
    "    s.append(\" \" * begin) \n",
    "    for a, b in zip(align1[begin:end], align2[begin:end]):\n",
    "        if a == b:\n",
    "            s.append(\"|\")  # match \n",
    "        elif a == \"-\" or b == \"-\":\n",
    "            s.append(\" \")  # gap \n",
    "        else: \n",
    "            s.append(\".\")  # mismatch\n",
    "    s.append(\"\\n\")\n",
    "    s.append(\"%s\\n\" % align2)\n",
    "    s.append(\"  Score=%g\\n\" % score)\n",
    "      ## Obtain indices of matching characters (indicated by the \"|\" character)\n",
    "    c = []\n",
    "    for pos, char in enumerate(s):\n",
    "        pipe = \"|\"\n",
    "        if char == pipe:\n",
    "            c.append(pos-2)\n",
    "\n",
    "\n",
    "    return(c)\n",
    "    return ''.join(s) \n",
    "\n",
    "\n",
    "\n",
    "def read_dna_seqs(filename):\n",
    "    with open(filename, 'r') as f:\n",
    "        s = ' '.join(f.readlines()).replace(\" \",\"\")\n",
    "        t = s.replace(\"\\n\", \"\").split(\",\")\n",
    "        #t = [a.split() for a in s.replace(\"\\n\", \" \").split(\",\")]\n",
    "        return t\n",
    "    \n",
    "        \n",
    "# next should be an algorithm, sequence allignment that that takes into account the first function, \n",
    "#read_dna_seqsb\n",
    "#tv = read_dna_seqs(file_name)\n",
    "#print(tv)\n",
    "\n",
    "file_name = \"snap_sample_dna.txt\"\n",
    "t = read_dna_seqs(file_name)\n",
    "print(t)\n",
    "t_1 = t[0]\n",
    "print(\"this is t_1: \"+str(t_1))\n",
    "\n",
    "t_2 = t[1]\n",
    "print(\"this is t_2: \"+str(t_2))\n",
    "print(\"with length: \" + str(len(t_1)) + \"and length\" + (str(len(t_2))))\n",
    "align = pairwise2.align.globalxx(t_1, t_2)\n",
    "print(\"this is the allignment: \"+ \"@\"*30)\n",
    "print(format_alignment(*align[1]))\n",
    "\n",
    "match_index = match_index(*align[0])\n",
    "print(match_index)\n",
    "\n",
    "\n",
    "            \n",
    "\n",
    "       \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "711ad682",
   "metadata": {},
   "source": [
    " # Multiple sequence allignment \n",
    " \n",
    "Code uses a scoring range. First sequence will be compared to second, to third, to fourth, and so on. The one with the most in common or match, verified through len(match_index)\n",
    "\n",
    "where one sequence stay constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a918c5de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is the alignment for the sequence with the highest matched index with sequence 1: \n",
      "\n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGC-TAAGG----CTGGT------CCAGGTGCAG----CT--ATTTCT-CCTTCTGAAT-T-AG-CTGCTCAGCTCT-CAACT---CA-GAAC-C-C-AGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |   | |   |    ||  |      |||  | ||     |   |  ||  || | | ||  | |  ||| || | ||| | |||   |  |  | | | ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCT-A---CCT---GATTTCT--TAGAAAACCA--T-CA-AAAAC-CCA--TC-ACC-T-T-AA-ATCA-ACTG-TC-G-TCTGC-ACTTGGC-TG--CTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "  Score=251\n",
      "\n",
      "this is the index/loca where sequence is the same for max matches:\n",
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 151, 156, 157, 160, 167, 168, 169, 172, 174, 175, 181, 185, 188, 189, 192, 193, 195, 197, 199, 200, 203, 205, 208, 209, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 225, 229, 232, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n",
      "with a match score of[251]this is the sequence with most homology to the first sequence\n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n"
     ]
    }
   ],
   "source": [
    "from Bio import pairwise2\n",
    "from Bio.pairwise2 import format_alignment\n",
    "from Bio.Align.Applications import ClustalwCommandline\n",
    "import re\n",
    "\n",
    "def match_index(align1, align2, score, begin, end):\n",
    "    \"\"\"Format the alignment prettily into a string. \n",
    "\n",
    "      Since Biopython 1.71 identical matches are shown with a pipe \n",
    "      character, mismatches as a dot, and gaps as a space. \n",
    "\n",
    "      Note that spaces are also used at the start/end of a local \n",
    "      alignment. \n",
    "\n",
    "      Prior releases just used the pipe character to indicate  \n",
    "      aligned region (matches, mismatches and gaps). \n",
    "      \"\"\" \n",
    "    s = [] \n",
    "    s.append(\"%s\\n\" % align1) \n",
    "    s.append(\" \" * begin) \n",
    "    for a, b in zip(align1[begin:end], align2[begin:end]):\n",
    "        if a == b:\n",
    "            s.append(\"|\")  # match \n",
    "        elif a == \"-\" or b == \"-\":\n",
    "            s.append(\" \")  # gap \n",
    "        else: \n",
    "            s.append(\".\")  # mismatch\n",
    "    s.append(\"\\n\")\n",
    "    s.append(\"%s\\n\" % align2)\n",
    "    s.append(\"  Score=%g\\n\" % score)\n",
    "      ## Obtain indices of matching characters (indicated by the \"|\" character)\n",
    "    c = []\n",
    "    for pos, char in enumerate(s):\n",
    "        pipe = \"|\"\n",
    "        if char == pipe:\n",
    "            c.append(pos-2)\n",
    "\n",
    "\n",
    "    return(c)\n",
    "    return ''.join(s) \n",
    "\n",
    "\n",
    "def read_dna_seqs(filename):\n",
    "    with open(filename, 'r') as f:\n",
    "        s = ' '.join(f.readlines()).replace(\" \",\"\")\n",
    "        t = s.replace(\"\\n\", \"\").split(\",\")\n",
    "        #t = [a.split() for a in s.replace(\"\\n\", \" \").split(\",\")]\n",
    "        return t\n",
    "\n",
    "def return_highest_match(file_name):\n",
    "    t = read_dna_seqs(file_name)\n",
    "    t_0 = t[0]\n",
    "    dict_len = {}\n",
    "    \n",
    "    for i in range(1, len(t)):\n",
    "        align = pairwise2.align.globalxx(t_0, t[i])\n",
    "        index = match_index(*align[0])\n",
    "        length_index = len(index)\n",
    "        dict_len[t[i]] = [length_index]\n",
    "        \n",
    "    max_key = max(dict_len, key=dict_len.get)\n",
    "    length = dict_len[max_key]\n",
    "    align_final = pairwise2.align.globalxx(t_0, max_key)\n",
    "    print(\"this is the alignment for the sequence with the highest matched index with sequence 1: \" + \"\\n\")\n",
    "    print(format_alignment(*align_final[0]))\n",
    "    max_index1 = match_index(*align_final[0])\n",
    "    print(\"this is the index/loca where sequence is the same for max matches:\" + \"\\n\" + str(max_index1))\n",
    "    print(\"with a match score of\" + str(length)+'this is the sequence with most homology to the first sequence')\n",
    "    return max_key\n",
    "    \n",
    "#def find_gRNA(x, y): \n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "d = return_highest_match(\"snap_sample_dna.txt\")\n",
    "        \n",
    "    \n",
    "print(d)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26007ca7",
   "metadata": {},
   "source": [
    "# Where both sequence is not constant and changing\n",
    "To find the best max possible match between all available sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da99385a",
   "metadata": {},
   "source": [
    "# Find gRNA from two best match\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0bba7f4",
   "metadata": {},
   "source": [
    "### As mentioned as in class, I have not had the time to find gRNA from the index, especially when considering the breaks. \n",
    "\n",
    "### strategy \n",
    "### compare sequence, find best two matches based on the length of the matching index list\n",
    "### find gRNA from two best match\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4f549da9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it is comparing: \n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "withATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "this is the index:[0, 1, 2, 3, 4, 10, 11, 16, 17, 18, 21, 23, 24, 28, 30, 31, 33, 34, 36, 37, 40, 42, 44, 45, 47, 48, 50, 55, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 72, 76, 77, 79, 81, 86, 87, 89, 90, 93, 95, 96, 99, 101, 104, 105, 107, 108, 114, 116, 121, 123, 125, 127, 128, 131, 132, 133, 136, 138, 139, 142, 143, 144, 145, 148, 150, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 174, 175, 176, 177, 178, 180, 183, 184, 185, 189, 190, 197, 200, 205, 208, 209, 211, 213, 214, 216, 218, 220, 222, 224, 225, 226, 229, 237, 239, 241, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 260, 263, 264, 265, 266, 267, 269, 273, 275, 278, 279, 281, 283, 285, 286, 288, 290, 293, 294, 297, 298, 299, 301, 305, 306, 309, 310, 311, 313, 314, 317, 321, 322, 324, 325, 326, 331, 332, 334, 335, 339, 340, 341, 342, 347, 348, 349, 354, 360, 361, 364, 374, 375]\n",
      "it is comparing: \n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "withATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "this is the index:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 151, 156, 157, 160, 167, 168, 169, 172, 174, 175, 181, 185, 188, 189, 192, 193, 195, 197, 199, 200, 203, 205, 208, 209, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 225, 229, 232, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n",
      "it is comparing: \n",
      "ATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "withATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "this is the index:[0, 1, 5, 6, 9, 14, 15, 16, 18, 19, 22, 25, 27, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, 45, 47, 48, 50, 53, 55, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 75, 77, 78, 82, 86, 87, 89, 94, 96, 98, 100, 101, 103, 104, 106, 109, 110, 111, 116, 118, 119, 121, 123, 124, 127, 128, 129, 131, 132, 136, 137, 138, 139, 141, 143, 147, 148, 149, 150, 151, 154, 157, 158, 161, 162, 167, 168, 169, 170, 174, 175, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 265, 272, 274, 275, 277, 279, 280, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 301, 304, 306, 307, 308, 309, 312, 313, 316, 319, 327, 330, 332, 334, 335, 338, 340, 344, 347, 350, 351]\n",
      "Best match: ('ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC', 'ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC')\n",
      "Best index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 151, 156, 157, 160, 167, 168, 169, 172, 174, 175, 181, 185, 188, 189, 192, 193, 195, 197, 199, 200, 203, 205, 208, 209, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 225, 229, 232, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n",
      "[1, 100, 142, 148, 152, 158, 234, 243]\n",
      "[1, 100, 200, 234, 243]\n",
      "possible gRNA are: \n",
      "from first seq: \n",
      "['', 'GTGTAGTGCTTCTGTACTTCCTATGG', 'AGAACTTGACCTTCTTGAGCTAATGG', 'TGACCTTCTTGAGCTAATGGCTAAGG', 'CTTCTTGAGCTAATGGCTAAGGCTGG', 'GAGCTAATGGCTAAGGCTGGTCCAGG', 'CAGAAGCACCTGTTATGCTTGATCGG', 'CTGTTATGCTTGATCGGATGCTTAGG']\n",
      "from second seq: \n",
      "['', 'GTGTAGTGCTTCTGTACTTCCTATGG', 'TTAAATCAACTGTCGTCTGCACTTGG', 'CAGAAGCACCTGTTATGCTTGATCGG', 'CTGTTATGCTTGATCGGATGCTTAGG']\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "from Bio import pairwise2\n",
    "from Bio.pairwise2 import format_alignment\n",
    "from Bio.Align.Applications import ClustalwCommandline\n",
    "import re\n",
    "\n",
    "def match_index(align1, align2, score, begin, end):\n",
    "    \"\"\"Format the alignment prettily into a string. \n",
    "\n",
    "      Since Biopython 1.71 identical matches are shown with a pipe \n",
    "      character, mismatches as a dot, and gaps as a space. \n",
    "\n",
    "      Note that spaces are also used at the start/end of a local \n",
    "      alignment. \n",
    "\n",
    "      Prior releases just used the pipe character to indicate  \n",
    "      aligned region (matches, mismatches and gaps). \n",
    "      \"\"\" \n",
    "    s = [] \n",
    "    s.append(\"%s\\n\" % align1) \n",
    "    s.append(\" \" * begin) \n",
    "    for a, b in zip(align1[begin:end], align2[begin:end]):\n",
    "        if a == b:\n",
    "            s.append(\"|\")  # match \n",
    "        elif a == \"-\" or b == \"-\":\n",
    "            s.append(\" \")  # gap \n",
    "        else: \n",
    "            s.append(\".\")  # mismatch\n",
    "    s.append(\"\\n\")\n",
    "    s.append(\"%s\\n\" % align2)\n",
    "    s.append(\"  Score=%g\\n\" % score)\n",
    "      ## Obtain indices of matching characters (indicated by the \"|\" character)\n",
    "    c = []\n",
    "    for pos, char in enumerate(s):\n",
    "        pipe = \"|\"\n",
    "        if char == pipe:\n",
    "            c.append(pos-2)\n",
    "\n",
    "\n",
    "    return(c)\n",
    "    return ''.join(s) \n",
    "\n",
    "\n",
    "def read_dna_seqs(filename):\n",
    "    with open(filename, 'r') as f:\n",
    "        s = ' '.join(f.readlines()).replace(\" \",\"\")\n",
    "        t = s.replace(\"\\n\", \"\").split(\",\")\n",
    "        #t = [a.split() for a in s.replace(\"\\n\", \" \").split(\",\")]\n",
    "        return t\n",
    "def list_string(a_list):\n",
    "    str1 = \" \" \n",
    "    for item in a_list: \n",
    "        str1 += item\n",
    "\n",
    "    return str1 \n",
    "\n",
    "def find_gRNA(best_match):\n",
    "    # just a condition for troubleshooting and to avoid crashing, \n",
    "    #in case the length of the sequence inputted by the user is not \n",
    "    # long enough to obtain possible gRNA\n",
    "    if len(best_match) < 20:\n",
    "        pass\n",
    "        print(\"Error! No gRNA can be obtained input sequence with more than 23 bp long to obtain possible gRNA from best match\")\n",
    "    \n",
    "    # setting up empty list and using the re module to find location where pam sequence start,\n",
    "    # and using loca info to find gRNA sequence\n",
    "    cut_sites = []\n",
    "    possible_gRNA = []\n",
    "    for match in re.finditer(r\"[ATGC]GG\", best_match):\n",
    "        cut_sites.append(match.start())\n",
    "        position = match.start()\n",
    "        gRNA = best_match[position - 23 : position +3 ]\n",
    "        possible_gRNA.append(gRNA)\n",
    "    \n",
    "    print(cut_sites)\n",
    "    return possible_gRNA \n",
    "\n",
    "                \n",
    "def sequence_for_gRNA(file_name):\n",
    "    t = read_dna_seqs(file_name)\n",
    "    t_0 = t[0]\n",
    "    dict_len = {}\n",
    "    comp = {}\n",
    "    max_length = -999\n",
    "    compare_best = (None, None)\n",
    "    best_index = []\n",
    "    for item in t:\n",
    "        for i in range(t.index(item)+1, len(t)):\n",
    "            print(\"it is comparing: \" + \"\\n\" + str(item) + \"\\n\"+\"with\"+str(t[i]))\n",
    "            \n",
    "            # setting condition to avoid comparing the same sequence against each other\n",
    "            if item == t[i]:\n",
    "                continue\n",
    "            else: \n",
    "                #using the align  method to find two sequence with the most bp similarities\n",
    "                align = pairwise2.align.globalxx(item,t[i] )\n",
    "                index = match_index(*align[0])\n",
    "                print(\"this is the index:\" + str(index))\n",
    "                length_index = len(index)\n",
    "                \n",
    "                # reseting default value until no value  that pass through the loop is greater than \n",
    "                # default value\n",
    "                # a way to avoid using a dictionary which I used in my earlier attempt to solve this problem \n",
    "                if length_index > max_length:\n",
    "                    compare_best = (item, t[i])\n",
    "                    max_length = length_index\n",
    "                    best_index = index\n",
    "                    dict_len[(item, t[i])] = length_index\n",
    "            \n",
    "    print(\"Best match:\", compare_best)\n",
    "    print(\"Best index:\", best_index)\n",
    "    gRNA_1 = find_gRNA(compare_best[0])\n",
    "    gRNA_2 = find_gRNA(compare_best[1])\n",
    "    print(\"possible gRNA are: \")\n",
    "    print(\"from first seq: \")\n",
    "    print(gRNA_1)\n",
    "    print(\"from second seq: \")\n",
    "    print(gRNA_2)\n",
    "    \n",
    "    #seq = compare_best[0]\n",
    "    #sequence_list =[seq[t] for t in best_index]\n",
    "    #sequence_str= list_string(sequence_list)\n",
    "    #print(\"this is sequence where index match : \" + str(sequence_str))\n",
    "   # return sequence_str\n",
    "    \n",
    "\n",
    "            \n",
    "\n",
    "seq = sequence_for_gRNA(\"snap_sample_dna.txt\")\n",
    "print(seq)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f803b920",
   "metadata": {},
   "source": [
    "# Finding gRNA from sequence with greatest homology to all sequence provided"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0f53923c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it is comparing: \n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "withATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "this is the index:[0, 1, 2, 3, 4, 10, 11, 16, 17, 18, 21, 23, 24, 28, 30, 31, 33, 34, 36, 37, 40, 42, 44, 45, 47, 48, 50, 55, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 72, 76, 77, 79, 81, 86, 87, 89, 90, 93, 95, 96, 99, 101, 104, 105, 107, 108, 114, 116, 121, 123, 125, 127, 128, 131, 132, 133, 136, 138, 139, 142, 143, 144, 145, 148, 150, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 174, 175, 176, 177, 178, 180, 183, 184, 185, 189, 190, 197, 200, 205, 208, 209, 211, 213, 214, 216, 218, 220, 222, 224, 225, 226, 229, 237, 239, 241, 243, 244, 245, 246, 250, 252, 253, 254, 255, 256, 260, 263, 264, 265, 266, 267, 269, 273, 275, 278, 279, 281, 283, 285, 286, 288, 290, 293, 294, 297, 298, 299, 301, 305, 306, 309, 310, 311, 313, 314, 317, 321, 322, 324, 325, 326, 331, 332, 334, 335, 339, 340, 341, 342, 347, 348, 349, 354, 360, 361, 364, 374, 375]\n",
      "it is comparing: \n",
      "ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "withATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "this is the index:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 151, 156, 157, 160, 167, 168, 169, 172, 174, 175, 181, 185, 188, 189, 192, 193, 195, 197, 199, 200, 203, 205, 208, 209, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 225, 229, 232, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n",
      "it is comparing: \n",
      "ATGGGGGAAGAAACAAATGGATCAGTAGCAAGAATCCATGAAGGAGACAAAGCTGAGTCTCAAGCTCAAGAAGATATATGGAAGTACACATTTGGTTTCACTGAAATGGCTGCAGTAAAATGTGCTATTGAGTTGGGAATACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTTCTTCTAATTTTCTCTACCGCATCCTGAGGTTCTTGATTAACAGGGGAATATTCAAAGAGGAATCCACAG\n",
      "withATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC\n",
      "this is the index:[0, 1, 5, 6, 9, 14, 15, 16, 18, 19, 22, 25, 27, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, 45, 47, 48, 50, 53, 55, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 75, 77, 78, 82, 86, 87, 89, 94, 96, 98, 100, 101, 103, 104, 106, 109, 110, 111, 116, 118, 119, 121, 123, 124, 127, 128, 129, 131, 132, 136, 137, 138, 139, 141, 143, 147, 148, 149, 150, 151, 154, 157, 158, 161, 162, 167, 168, 169, 170, 174, 175, 181, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 261, 263, 265, 272, 274, 275, 277, 279, 280, 282, 284, 287, 288, 291, 292, 295, 296, 299, 300, 301, 304, 306, 307, 308, 309, 312, 313, 316, 319, 327, 330, 332, 334, 335, 338, 340, 344, 347, 350, 351]\n",
      "Best match: ('ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTAATGGCTAAGGCTGGTCCAGGTGCAGCTATTTCTCCTTCTGAATTAGCTGCTCAGCTCTCAACTCAGAACCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC', 'ATGGGTTCAACAAGCGAGAGCCAGAGTAACAGTCTCACTCACACAGAAGACGAAGCTTTCTTATTTGCCATGCAATTGTGTAGTGCTTCTGTACTTCCTATGGTCCTAAAATCAGCCGTAGAACTTGACCTTCTTGAGCTACCTGATTTCTTAGAAAACCATCAAAAACCCATCACCTTAAATCAACTGTCGTCTGCACTTGGCTGCTCTCCAGAAGCACCTGTTATGCTTGATCGGATGCTTAGGCTACTTGCTTCTTACTCTGTTCTCAATTGTACTC')\n",
      "Best index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 145, 147, 151, 156, 157, 160, 167, 168, 169, 172, 174, 175, 181, 185, 188, 189, 192, 193, 195, 197, 199, 200, 203, 205, 208, 209, 210, 212, 213, 215, 217, 218, 219, 221, 223, 224, 225, 229, 232, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308]\n",
      "[1, 100, 142, 148, 152, 158, 234, 243]\n",
      "[1, 100, 200, 234, 243]\n",
      "possible gRNA are: \n",
      "from first seq: \n",
      "['', 'GTGTAGTGCTTCTGTACTTCCTATGG', 'AGAACTTGACCTTCTTGAGCTAATGG', 'TGACCTTCTTGAGCTAATGGCTAAGG', 'CTTCTTGAGCTAATGGCTAAGGCTGG', 'GAGCTAATGGCTAAGGCTGGTCCAGG', 'CAGAAGCACCTGTTATGCTTGATCGG', 'CTGTTATGCTTGATCGGATGCTTAGG']\n",
      "from second seq: \n",
      "['', 'GTGTAGTGCTTCTGTACTTCCTATGG', 'TTAAATCAACTGTCGTCTGCACTTGG', 'CAGAAGCACCTGTTATGCTTGATCGG', 'CTGTTATGCTTGATCGGATGCTTAGG']\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "from Bio import pairwise2\n",
    "from Bio.pairwise2 import format_alignment\n",
    "from Bio.Align.Applications import ClustalwCommandline\n",
    "import re\n",
    "\n",
    "def match_index(align1, align2, score, begin, end):\n",
    "    \"\"\"Format the alignment prettily into a string. \n",
    "\n",
    "      Since Biopython 1.71 identical matches are shown with a pipe \n",
    "      character, mismatches as a dot, and gaps as a space. \n",
    "\n",
    "      Note that spaces are also used at the start/end of a local \n",
    "      alignment. \n",
    "\n",
    "      Prior releases just used the pipe character to indicate  \n",
    "      aligned region (matches, mismatches and gaps). \n",
    "      \"\"\" \n",
    "    s = [] \n",
    "    s.append(\"%s\\n\" % align1) \n",
    "    s.append(\" \" * begin) \n",
    "    for a, b in zip(align1[begin:end], align2[begin:end]):\n",
    "        if a == b:\n",
    "            s.append(\"|\")  # match \n",
    "        elif a == \"-\" or b == \"-\":\n",
    "            s.append(\" \")  # gap \n",
    "        else: \n",
    "            s.append(\".\")  # mismatch\n",
    "    s.append(\"\\n\")\n",
    "    s.append(\"%s\\n\" % align2)\n",
    "    s.append(\"  Score=%g\\n\" % score)\n",
    "      ## Obtain indices of matching characters (indicated by the \"|\" character)\n",
    "    c = []\n",
    "    for pos, char in enumerate(s):\n",
    "        pipe = \"|\"\n",
    "        if char == pipe:\n",
    "            c.append(pos-2)\n",
    "\n",
    "\n",
    "    return(c)\n",
    "    return ''.join(s) \n",
    "\n",
    "\n",
    "def read_dna_seqs(filename):\n",
    "    with open(filename, 'r') as f:\n",
    "        s = ' '.join(f.readlines()).replace(\" \",\"\")\n",
    "        t = s.replace(\"\\n\", \"\").split(\",\")\n",
    "        #t = [a.split() for a in s.replace(\"\\n\", \" \").split(\",\")]\n",
    "        return t\n",
    "def list_string(a_list):\n",
    "    str1 = \" \" \n",
    "    for item in a_list: \n",
    "        str1 += item\n",
    "\n",
    "    return str1 \n",
    "\n",
    "def find_gRNA(best_match):\n",
    "    # just a condition for troubleshooting and to avoid crashing, \n",
    "    #in case the length of the sequence inputted by the user is not \n",
    "    # long enough to obtain possible gRNA\n",
    "    if len(best_match) < 20:\n",
    "        pass\n",
    "        print(\"Error! No gRNA can be obtained input sequence with more than 23 bp long to obtain possible gRNA from best match\")\n",
    "    \n",
    "    # setting up empty list and using the re module to find location where pam sequence start,\n",
    "    # and using loca info to find gRNA sequence\n",
    "    cut_sites = []\n",
    "    possible_gRNA = []\n",
    "    for match in re.finditer(r\"[ATGC]GG\", best_match):\n",
    "        cut_sites.append(match.start())\n",
    "        position = match.start()\n",
    "        gRNA = best_match[position - 23 : position +3 ]\n",
    "        possible_gRNA.append(gRNA)\n",
    "    \n",
    "    print(cut_sites)\n",
    "    return possible_gRNA \n",
    "\n",
    "                \n",
    "def sequence_for_gRNA(file_name):\n",
    "    t = read_dna_seqs(file_name)\n",
    "    t_0 = t[0]\n",
    "    dict_len = {}\n",
    "    comp = {}\n",
    "    max_length = -999\n",
    "    compare_best = (None, None)\n",
    "    best_index = []\n",
    "    for item in t:\n",
    "        for i in range(t.index(item)+1, len(t)):\n",
    "            print(\"it is comparing: \" + \"\\n\" + str(item) + \"\\n\"+\"with\"+str(t[i]))\n",
    "            \n",
    "            # setting condition to avoid comparing the same sequennce against each other\n",
    "            if item == t[i]:\n",
    "                continue\n",
    "            else: \n",
    "                #using the align  method to find two sequence with the most bp similarities\n",
    "                align = pairwise2.align.globalxx(item,t[i] )\n",
    "                index = match_index(*align[0])\n",
    "                print(\"this is the index:\" + str(index))\n",
    "                length_index = len(index)\n",
    "                \n",
    "                # reseting default value until no value  that pass through the loop is greater than \n",
    "                # default value\n",
    "                # a way to avoid using a dictionary which I used in my earlier attempt to solve this problem \n",
    "                if length_index > max_length:\n",
    "                    compare_best = (item, t[i])\n",
    "                    max_length = length_index\n",
    "                    best_index = index\n",
    "                    dict_len[(item, t[i])] = length_index\n",
    "            \n",
    "    print(\"Best match:\", compare_best)\n",
    "    print(\"Best index:\", best_index)\n",
    "    gRNA_1 = find_gRNA(compare_best[0])\n",
    "    gRNA_2 = find_gRNA(compare_best[1])\n",
    "    print(\"possible gRNA are: \")\n",
    "    print(\"from first seq: \")\n",
    "    print(gRNA_1)\n",
    "    print(\"from second seq: \")\n",
    "    print(gRNA_2)\n",
    "    \n",
    "    #seq = compare_best[0]\n",
    "    #sequence_list =[seq[t] for t in best_index]\n",
    "    #sequence_str= list_string(sequence_list)\n",
    "    #print(\"this is sequence where index match : \" + str(sequence_str))\n",
    "   # return sequence_str\n",
    "    \n",
    "\n",
    "            \n",
    "\n",
    "seq = sequence_for_gRNA(\"snap_sample_dna.txt\")\n",
    "print(seq)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55e41284",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
